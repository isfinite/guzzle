var devDependencies = Object.keys(require('./package.json').devDependencies),
	fs = require('fs'),
	packages = {};

var toDirName = process.env.TO_DIR_NAME || 'public',
	jsFileName = process.env.JS_FILE_NAME || 'app';

devDependencies.forEach(function(item) {
	packages[item] = require(item);
});

var Gulp = function() {
	this.tasks = [];
};

Gulp.prototype.addTask = function(name, task) {
	var deps = (this.tasks.length) ? [this.tasks[this.tasks.length - 1]] : [];
	packages.gulp.task(name, deps, task);
	this.tasks.push(name);
}

var gulp = new Gulp();

if (packages.mocha) {
	gulp.addTask('test', function() {
		return packages.gulp.src('./test/*.js').pipe(packages['gulp-mocha']());
	});
}

gulp.addTask('lint', function() {
	return packages.gulp.src('./test/*.js').pipe(packages['gulp-jshint']());
});

gulp.addTask('clean', function() {
	packages.gulp.src('./' + toDirName + '/js', {read: false}).pipe(packages['gulp-clean']());
	return packages.gulp.src('./' + toDirName + '/css', {read: false}).pipe(packages['gulp-clean']());
});

if (packages['gulp-bower-files']) {
	gulp.addTask('bower', function() {
		return packages['gulp-bower-files']()
			.pipe(packages['gulp-concat']('vendor.js'))
			.pipe(packages.gulp.dest('./' + toDirName + '/js'));
	});	
}

if (packages['browserify']) {
	gulp.addTask('browserify', function() {
		packages['browserify']('./lib/' + jsFileName + '.js').bundle() 
			.pipe(packages['vinyl-source-stream']('./js/' + jsFileName + '.js'))
			.pipe(packages.gulp.dest('./' + toDirName));
	});
}

gulp.addTask('concat', function(callback) {
	fs.readFile('./.bowerrc', { encoding: 'utf8' }, function(err, data) {
		packages.gulp.src(['./' + toDirName + '/js/' + JSON.parse(data).directory + '.js', './' + toDirName + '/js/' + jsFileName + '.js'])
			.pipe(packages['gulp-concat'](jsFileName + '.js'))
			.pipe(packages.gulp.dest('./' + toDirName + '/js'));

		packages.gulp.src('./' + toDirName + '/js/' + jsFileName + '.js')
			.pipe(packages.gulp.dest('./' + toDirName));

		callback();
	});
});

gulp.addTask('copy', function() {
	return packages.gulp.src('./' + toDirName + '/js/' + jsFileName + '.js')
		.pipe(packages.gulp.dest('./' + toDirName));
});

gulp.addTask('css', function() {
	var stream = packages.gulp.src('lib/css/*.css');

	if (packages['gulp-less']) {
		stream.pipe(packages['gulp-less']());
	}

	return stream.pipe(packages['gulp-minify-css']({keepBreaks:true}))
		.pipe(packages.gulp.dest(toDirName + '/css'));
});

gulp.addTask('uglify', function() {
	return packages.gulp.src('./' + toDirName + '/' + jsFileName + '.js')
		.pipe(packages['gulp-uglify']())
		.pipe(packages['gulp-rename'](jsFileName + '.min.js'))
		.pipe(packages.gulp.dest('./' + toDirName + '/js'));
});

gulp.addTask('cleanup', function() {
	packages.gulp.src('./' + toDirName + '/' + jsFileName + '.js', {read: false}).pipe(packages['gulp-clean']());
	return packages.gulp.src('./' + toDirName + '/js/vendor.js', {read: false}).pipe(packages['gulp-clean']());
});

gulp.addTask('watch', function() {
	return packages.gulp.watch(['./lib/js/*.js', './test/*.js', './lib/css/*.css', './*.html'], ['cleanup']);
});

gulp.addTask('default', function() {
	require('child_process').exec('node server');
	
	// timeout just allows message to show after the finished default message
	setTimeout(function() {
		console.log('Server started at localhost:' + (process.env.PORT || 8080));
	}, 1);
});