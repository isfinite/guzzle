var devDependencies = Object.keys(require('./package.json').devDependencies),
	packages = {};

var toDirName = process.env.TO_DIR_NAME || 'public',
	jsFileName = process.env.JS_FILE_NAME || 'app';

devDependencies.forEach(function(item) {
	packages[item] = require(item);
});

var Gulp = function() {
	this.tasks = [];

};

Gulp.prototype.addTask = function(name, task) {
	var deps = (this.tasks.length) ? [this.tasks[this.tasks.length - 1]] : [];
	packages.gulp.task(name, deps, task);
	this.tasks.push(name);
}

var gulp = new Gulp();

if (packages.mocha) {
	gulp.addTask('test', function() {
		return packages.gulp.src('./test/*.js').pipe(packages['gulp-mocha']());
	});
}

gulp.addTask('lint', function() {
	return packages.gulp.src('./test/*.js').pipe(packages['gulp-jshint']());
});

gulp.addTask('clean', function() {
	return packages.gulp.src('./' + toDirName, {read: false}).pipe(packages['gulp-clean']());
});

if (packages['gulp-bower-files']) {
	gulp.addTask('bower', function() {
		return packages['gulp-bower-files']()
			.pipe(packages['gulp-concat']('vendor.js'))
			.pipe(packages.gulp.dest('./' + toDirName + '/js'));
	});	
}

if (packages['browserify']) {
	gulp.addTask('browserify', function() {
		packages['browserify']('./lib/' + jsFileName + '.js').bundle() 
			.pipe(packages['vinyl-source-stream']('./js/' + jsFileName + '.js'))
			.pipe(packages.gulp.dest('./' + toDirName));
	});
}

gulp.addTask('concat', function() {
	packages.gulp.src(['./' + toDirName + '/js/' + require('.bowerrc').directory + '.js', './' + toDirName + '/js/' + jsFileName + '.js'])
		.pipe(packages['gulp-concat'](jsFileName + '.js'))
		.pipe(packages.gulp.dest('./' + toDirName + '/js'));

	return packages.gulp.src('./' + toDirName + '/js/' + jsFileName + '.js')
		.pipe(packages.gulp.dest('./' + toDirName));
});

gulp.addTask('default', function() {
	require('child_process').exec('node server.js');
});